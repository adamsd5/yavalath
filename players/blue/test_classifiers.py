import unittest
import yavalath_engine
from players import blue_player
import pprint
import collections
import pickle
import timeit
import numpy
import pathlib
import itertools

class TestNextMoveClassifier(unittest.TestCase):
    def setUp(self):
        self.signature_table, self.properties_table = pickle.load(open("signature_table.dat", "rb"))
        self.properties_table = numpy.array(self.properties_table)
        self.signature_table = numpy.array(self.signature_table)

    def test_all_pairs_of_arms(self):
        from players.blue_player import SpaceProperies
        def test(a, b, c, d, e, f, g):
            return blue_player.NextMoveClassifier.find_wins_and_checks_for_token_and_opp_arms((c, b, a), (e, f, g), d)
        # NOTE (dadams, 20170625): This unit test cost me 2 hours, and made me re-evaluate my life choices.
        self.assertEqual(test(-1, -1, 0, -1, -1, -1, 0), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, -1, 0, -1, -1, -1, 1), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, -1, 0, -1, -1, 0, -1), blue_player.SpaceProperies.BLACK_DOUBLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, -1, 0, 0), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, -1, 0, 1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, -1, 1, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, -1, 1, 0), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, -1, 1, 1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 0, -1, -1), blue_player.SpaceProperies.BLACK_DOUBLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 0, -1, 0), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 0, -1, 1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 0, 0, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 0, 0, 1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 0, 1, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 0, 1, 0), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 0, 1, 1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 1, -1, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 1, -1, 0), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 1, -1, 1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 1, 0, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 1, 0, 0), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 1, 0, 1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 1, 1, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, -1, 1, 1, 0), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, 1, -1, -1, 0), None)
        self.assertEqual(test(-1, -1, 0, 1, -1, -1, 1), None)
        self.assertEqual(test(-1, -1, 0, 1, -1, 0, -1), None)
        self.assertEqual(test(-1, -1, 0, 1, -1, 0, 0), None)
        self.assertEqual(test(-1, -1, 0, 1, -1, 0, 1), None)
        self.assertEqual(test(-1, -1, 0, 1, -1, 1, -1), None)
        self.assertEqual(test(-1, -1, 0, 1, -1, 1, 0), None)
        self.assertEqual(test(-1, -1, 0, 1, -1, 1, 1), None)
        self.assertEqual(test(-1, -1, 0, 1, 0, -1, -1), None)
        self.assertEqual(test(-1, -1, 0, 1, 0, -1, 0), None)
        self.assertEqual(test(-1, -1, 0, 1, 0, -1, 1), None)
        self.assertEqual(test(-1, -1, 0, 1, 0, 0, -1), None)
        self.assertEqual(test(-1, -1, 0, 1, 0, 0, 1), None)
        self.assertEqual(test(-1, -1, 0, 1, 0, 1, -1), None)
        self.assertEqual(test(-1, -1, 0, 1, 0, 1, 0), None)
        self.assertEqual(test(-1, -1, 0, 1, 0, 1, 1), blue_player.SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, 1, 1, -1, -1), None)
        self.assertEqual(test(-1, -1, 0, 1, 1, -1, 0), None)
        self.assertEqual(test(-1, -1, 0, 1, 1, -1, 1), None)
        self.assertEqual(test(-1, -1, 0, 1, 1, 0, -1), None)
        self.assertEqual(test(-1, -1, 0, 1, 1, 0, 0), None)
        self.assertEqual(test(-1, -1, 0, 1, 1, 0, 1), blue_player.SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 0, 1, 1, 1, -1), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, -1, 0, 1, 1, 1, 0), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, -1, 1, -1, -1, -1, 0), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, -1, 1, -1, -1, -1, 1), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, -1, 1, -1, -1, 0, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 1, -1, -1, 0, 0), None)
        self.assertEqual(test(-1, -1, 1, -1, -1, 0, 1), None)
        self.assertEqual(test(-1, -1, 1, -1, -1, 1, -1), None)
        self.assertEqual(test(-1, -1, 1, -1, -1, 1, 0), None)
        self.assertEqual(test(-1, -1, 1, -1, -1, 1, 1), None)
        self.assertEqual(test(-1, -1, 1, -1, 0, -1, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 1, -1, 0, -1, 0), None)
        self.assertEqual(test(-1, -1, 1, -1, 0, -1, 1), None)
        self.assertEqual(test(-1, -1, 1, -1, 0, 0, -1), None)
        self.assertEqual(test(-1, -1, 1, -1, 0, 0, 1), None)
        self.assertEqual(test(-1, -1, 1, -1, 0, 1, -1), None)
        self.assertEqual(test(-1, -1, 1, -1, 0, 1, 0), None)
        self.assertEqual(test(-1, -1, 1, -1, 0, 1, 1), None)
        self.assertEqual(test(-1, -1, 1, -1, 1, -1, -1), None)
        self.assertEqual(test(-1, -1, 1, -1, 1, -1, 0), None)
        self.assertEqual(test(-1, -1, 1, -1, 1, -1, 1), None)
        self.assertEqual(test(-1, -1, 1, -1, 1, 0, -1), None)
        self.assertEqual(test(-1, -1, 1, -1, 1, 0, 0), None)
        self.assertEqual(test(-1, -1, 1, -1, 1, 0, 1), None)
        self.assertEqual(test(-1, -1, 1, -1, 1, 1, -1), None)
        self.assertEqual(test(-1, -1, 1, -1, 1, 1, 0), None)
        self.assertEqual(test(-1, -1, 1, 1, -1, -1, 0), None)
        self.assertEqual(test(-1, -1, 1, 1, -1, -1, 1), None)
        self.assertEqual(test(-1, -1, 1, 1, -1, 0, -1), None)
        self.assertEqual(test(-1, -1, 1, 1, -1, 0, 0), None)
        self.assertEqual(test(-1, -1, 1, 1, -1, 0, 1), None)
        self.assertEqual(test(-1, -1, 1, 1, -1, 1, -1), None)
        self.assertEqual(test(-1, -1, 1, 1, -1, 1, 0), None)
        self.assertEqual(test(-1, -1, 1, 1, -1, 1, 1), None)
        self.assertEqual(test(-1, -1, 1, 1, 0, -1, -1), None)
        self.assertEqual(test(-1, -1, 1, 1, 0, -1, 0), None)
        self.assertEqual(test(-1, -1, 1, 1, 0, -1, 1), None)
        self.assertEqual(test(-1, -1, 1, 1, 0, 0, -1), None)
        self.assertEqual(test(-1, -1, 1, 1, 0, 0, 1), None)
        self.assertEqual(test(-1, -1, 1, 1, 0, 1, -1), blue_player.SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 1, 1, 0, 1, 0), blue_player.SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 1, 1, 0, 1, 1), blue_player.SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, -1, 1, 1, 1, -1, -1), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, -1, 1, 1, 1, -1, 0), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, -1, 1, 1, 1, -1, 1), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, -1, 1, 1, 1, 0, -1), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, -1, 1, 1, 1, 0, 0), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, -1, 1, 1, 1, 0, 1), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, -1, 1, 1, 1, 1, -1), blue_player.SpaceProperies.WHITE_WIN)
        self.assertEqual(test(-1, -1, 1, 1, 1, 1, 0), blue_player.SpaceProperies.WHITE_WIN)
        self.assertEqual(test(-1, 0, -1, -1, -1, -1, 0), blue_player.SpaceProperies.BLACK_WIN)
        self.assertEqual(test(-1, 0, -1, -1, -1, -1, 1), blue_player.SpaceProperies.BLACK_WIN)
        self.assertEqual(test(-1, 0, -1, -1, -1, 0, -1), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 0, -1, -1, -1, 0, 0), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 0, -1, -1, -1, 0, 1), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 0, -1, -1, -1, 1, -1), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 0, -1, -1, -1, 1, 0), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 0, -1, -1, -1, 1, 1), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 0, -1, -1, 0, -1, -1), blue_player.SpaceProperies.BLACK_DOUBLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 0, -1, 0), blue_player.SpaceProperies.BLACK_DOUBLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 0, -1, 1), blue_player.SpaceProperies.BLACK_DOUBLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 0, 0, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 0, 0, 1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 0, 1, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 0, 1, 0), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 0, 1, 1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 1, -1, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 1, -1, 0), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 1, -1, 1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 1, 0, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 1, 0, 0), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 1, 0, 1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 1, 1, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, -1, 1, 1, 0), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, 1, -1, -1, 0), None)
        self.assertEqual(test(-1, 0, -1, 1, -1, -1, 1), None)
        self.assertEqual(test(-1, 0, -1, 1, -1, 0, -1), None)
        self.assertEqual(test(-1, 0, -1, 1, -1, 0, 0), None)
        self.assertEqual(test(-1, 0, -1, 1, -1, 0, 1), None)
        self.assertEqual(test(-1, 0, -1, 1, -1, 1, -1), None)
        self.assertEqual(test(-1, 0, -1, 1, -1, 1, 0), None)
        self.assertEqual(test(-1, 0, -1, 1, -1, 1, 1), None)
        self.assertEqual(test(-1, 0, -1, 1, 0, -1, -1), None)
        self.assertEqual(test(-1, 0, -1, 1, 0, -1, 0), None)
        self.assertEqual(test(-1, 0, -1, 1, 0, -1, 1), None)
        self.assertEqual(test(-1, 0, -1, 1, 0, 0, -1), None)
        self.assertEqual(test(-1, 0, -1, 1, 0, 0, 1), None)
        self.assertEqual(test(-1, 0, -1, 1, 0, 1, -1), None)
        self.assertEqual(test(-1, 0, -1, 1, 0, 1, 0), None)
        self.assertEqual(test(-1, 0, -1, 1, 0, 1, 1), blue_player.SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, 1, 1, -1, -1), None)
        self.assertEqual(test(-1, 0, -1, 1, 1, -1, 0), None)
        self.assertEqual(test(-1, 0, -1, 1, 1, -1, 1), None)
        self.assertEqual(test(-1, 0, -1, 1, 1, 0, -1), None)
        self.assertEqual(test(-1, 0, -1, 1, 1, 0, 0), None)
        self.assertEqual(test(-1, 0, -1, 1, 1, 0, 1), blue_player.SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, -1, 1, 1, 1, -1), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 0, -1, 1, 1, 1, 0), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 0, 0, -1, -1, -1, 0), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 0, 0, -1, -1, -1, 1), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 0, 0, -1, -1, 0, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, 0, -1, -1, 0, 0), None)
        self.assertEqual(test(-1, 0, 0, -1, -1, 0, 1), None)
        self.assertEqual(test(-1, 0, 0, -1, -1, 1, -1), None)
        self.assertEqual(test(-1, 0, 0, -1, -1, 1, 0), None)
        self.assertEqual(test(-1, 0, 0, -1, -1, 1, 1), None)
        self.assertEqual(test(-1, 0, 0, -1, 0, -1, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, 0, -1, 0, -1, 0), None)
        self.assertEqual(test(-1, 0, 0, -1, 0, -1, 1), None)
        self.assertEqual(test(-1, 0, 0, -1, 0, 0, -1), None)
        self.assertEqual(test(-1, 0, 0, -1, 0, 0, 1), None)
        self.assertEqual(test(-1, 0, 0, -1, 0, 1, -1), None)
        self.assertEqual(test(-1, 0, 0, -1, 0, 1, 0), None)
        self.assertEqual(test(-1, 0, 0, -1, 0, 1, 1), None)
        self.assertEqual(test(-1, 0, 0, -1, 1, -1, -1), None)
        self.assertEqual(test(-1, 0, 0, -1, 1, -1, 0), None)
        self.assertEqual(test(-1, 0, 0, -1, 1, -1, 1), None)
        self.assertEqual(test(-1, 0, 0, -1, 1, 0, -1), None)
        self.assertEqual(test(-1, 0, 0, -1, 1, 0, 0), None)
        self.assertEqual(test(-1, 0, 0, -1, 1, 0, 1), None)
        self.assertEqual(test(-1, 0, 0, -1, 1, 1, -1), None)
        self.assertEqual(test(-1, 0, 0, -1, 1, 1, 0), None)
        self.assertEqual(test(-1, 0, 0, 1, -1, -1, 0), None)
        self.assertEqual(test(-1, 0, 0, 1, -1, -1, 1), None)
        self.assertEqual(test(-1, 0, 0, 1, -1, 0, -1), None)
        self.assertEqual(test(-1, 0, 0, 1, -1, 0, 0), None)
        self.assertEqual(test(-1, 0, 0, 1, -1, 0, 1), None)
        self.assertEqual(test(-1, 0, 0, 1, -1, 1, -1), None)
        self.assertEqual(test(-1, 0, 0, 1, -1, 1, 0), None)
        self.assertEqual(test(-1, 0, 0, 1, -1, 1, 1), None)
        self.assertEqual(test(-1, 0, 0, 1, 0, -1, -1), None)
        self.assertEqual(test(-1, 0, 0, 1, 0, -1, 0), None)
        self.assertEqual(test(-1, 0, 0, 1, 0, -1, 1), None)
        self.assertEqual(test(-1, 0, 0, 1, 0, 0, -1), None)
        self.assertEqual(test(-1, 0, 0, 1, 0, 0, 1), None)
        self.assertEqual(test(-1, 0, 0, 1, 0, 1, -1), None)
        self.assertEqual(test(-1, 0, 0, 1, 0, 1, 0), None)
        self.assertEqual(test(-1, 0, 0, 1, 0, 1, 1), blue_player.SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, 0, 1, 1, -1, -1), None)
        self.assertEqual(test(-1, 0, 0, 1, 1, -1, 0), None)
        self.assertEqual(test(-1, 0, 0, 1, 1, -1, 1), None)
        self.assertEqual(test(-1, 0, 0, 1, 1, 0, -1), None)
        self.assertEqual(test(-1, 0, 0, 1, 1, 0, 0), None)
        self.assertEqual(test(-1, 0, 0, 1, 1, 0, 1), blue_player.SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, 0, 1, 1, 1, -1), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 0, 0, 1, 1, 1, 0), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 0, 1, -1, -1, -1, 0), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 0, 1, -1, -1, -1, 1), blue_player.SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 0, 1, -1, -1, 0, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, 1, -1, -1, 0, 0), None)
        self.assertEqual(test(-1, 0, 1, -1, -1, 0, 1), None)
        self.assertEqual(test(-1, 0, 1, -1, -1, 1, -1), None)
        self.assertEqual(test(-1, 0, 1, -1, -1, 1, 0), None)
        self.assertEqual(test(-1, 0, 1, -1, -1, 1, 1), None)
        self.assertEqual(test(-1, 0, 1, -1, 0, -1, -1), blue_player.SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, 1, -1, 0, -1, 0), None)
        self.assertEqual(test(-1, 0, 1, -1, 0, -1, 1), None)
        self.assertEqual(test(-1, 0, 1, -1, 0, 0, -1), None)
        self.assertEqual(test(-1, 0, 1, -1, 0, 0, 1), None)
        self.assertEqual(test(-1, 0, 1, -1, 0, 1, -1), None)
        self.assertEqual(test(-1, 0, 1, -1, 0, 1, 0), None)
        self.assertEqual(test(-1, 0, 1, -1, 0, 1, 1), None)
        self.assertEqual(test(-1, 0, 1, -1, 1, -1, -1), None)
        self.assertEqual(test(-1, 0, 1, -1, 1, -1, 0), None)
        self.assertEqual(test(-1, 0, 1, -1, 1, -1, 1), None)
        self.assertEqual(test(-1, 0, 1, -1, 1, 0, -1), None)
        self.assertEqual(test(-1, 0, 1, -1, 1, 0, 0), None)
        self.assertEqual(test(-1, 0, 1, -1, 1, 0, 1), None)
        self.assertEqual(test(-1, 0, 1, -1, 1, 1, -1), None)
        self.assertEqual(test(-1, 0, 1, -1, 1, 1, 0), None)
        self.assertEqual(test(-1, 0, 1, 1, -1, -1, 0), None)
        self.assertEqual(test(-1, 0, 1, 1, -1, -1, 1), None)
        self.assertEqual(test(-1, 0, 1, 1, -1, 0, -1), None)
        self.assertEqual(test(-1, 0, 1, 1, -1, 0, 0), None)
        self.assertEqual(test(-1, 0, 1, 1, -1, 0, 1), None)
        self.assertEqual(test(-1, 0, 1, 1, -1, 1, -1), None)
        self.assertEqual(test(-1, 0, 1, 1, -1, 1, 0), None)
        self.assertEqual(test(-1, 0, 1, 1, -1, 1, 1), None)
        self.assertEqual(test(-1, 0, 1, 1, 0, -1, -1), None)
        self.assertEqual(test(-1, 0, 1, 1, 0, -1, 0), None)
        self.assertEqual(test(-1, 0, 1, 1, 0, -1, 1), None)
        self.assertEqual(test(-1, 0, 1, 1, 0, 0, -1), None)
        self.assertEqual(test(-1, 0, 1, 1, 0, 0, 1), None)
        self.assertEqual(test(-1, 0, 1, 1, 0, 1, -1), blue_player.SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, 1, 1, 0, 1, 0), blue_player.SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, 1, 1, 0, 1, 1), blue_player.SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 0, 1, 1, 1, -1, -1), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 0, 1, 1, 1, -1, 0), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 0, 1, 1, 1, -1, 1), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 0, 1, 1, 1, 0, -1), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 0, 1, 1, 1, 0, 0), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 0, 1, 1, 1, 0, 1), blue_player.SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 0, 1, 1, 1, 1, -1), blue_player.SpaceProperies.WHITE_WIN)
        self.assertEqual(test(-1, 0, 1, 1, 1, 1, 0), blue_player.SpaceProperies.WHITE_WIN)
        self.assertEqual(test(-1, 1, -1, -1, -1, -1, 0), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(-1, 1, -1, -1, -1, -1, 1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(-1, 1, -1, -1, -1, 0, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 1, -1, -1, -1, 0, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 1, -1, -1, -1, 0, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 1, -1, -1, -1, 1, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 1, -1, -1, -1, 1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 1, -1, -1, -1, 1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 1, -1, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, -1, -1, 0, -1, 0), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, -1, -1, 0, -1, 1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, -1, -1, 0, 0, -1), None)
        self.assertEqual(test(-1, 1, -1, -1, 0, 0, 1), None)
        self.assertEqual(test(-1, 1, -1, -1, 0, 1, -1), None)
        self.assertEqual(test(-1, 1, -1, -1, 0, 1, 0), None)
        self.assertEqual(test(-1, 1, -1, -1, 0, 1, 1), None)
        self.assertEqual(test(-1, 1, -1, -1, 1, -1, -1), None)
        self.assertEqual(test(-1, 1, -1, -1, 1, -1, 0), None)
        self.assertEqual(test(-1, 1, -1, -1, 1, -1, 1), None)
        self.assertEqual(test(-1, 1, -1, -1, 1, 0, -1), None)
        self.assertEqual(test(-1, 1, -1, -1, 1, 0, 0), None)
        self.assertEqual(test(-1, 1, -1, -1, 1, 0, 1), None)
        self.assertEqual(test(-1, 1, -1, -1, 1, 1, -1), None)
        self.assertEqual(test(-1, 1, -1, -1, 1, 1, 0), None)
        self.assertEqual(test(-1, 1, -1, 1, -1, -1, 0), None)
        self.assertEqual(test(-1, 1, -1, 1, -1, -1, 1), None)
        self.assertEqual(test(-1, 1, -1, 1, -1, 0, -1), None)
        self.assertEqual(test(-1, 1, -1, 1, -1, 0, 0), None)
        self.assertEqual(test(-1, 1, -1, 1, -1, 0, 1), None)
        self.assertEqual(test(-1, 1, -1, 1, -1, 1, -1), None)
        self.assertEqual(test(-1, 1, -1, 1, -1, 1, 0), None)
        self.assertEqual(test(-1, 1, -1, 1, -1, 1, 1), None)
        self.assertEqual(test(-1, 1, -1, 1, 0, -1, -1), None)
        self.assertEqual(test(-1, 1, -1, 1, 0, -1, 0), None)
        self.assertEqual(test(-1, 1, -1, 1, 0, -1, 1), None)
        self.assertEqual(test(-1, 1, -1, 1, 0, 0, -1), None)
        self.assertEqual(test(-1, 1, -1, 1, 0, 0, 1), None)
        self.assertEqual(test(-1, 1, -1, 1, 0, 1, -1), None)
        self.assertEqual(test(-1, 1, -1, 1, 0, 1, 0), None)
        self.assertEqual(test(-1, 1, -1, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, -1, 1, 1, -1, -1), None)
        self.assertEqual(test(-1, 1, -1, 1, 1, -1, 0), None)
        self.assertEqual(test(-1, 1, -1, 1, 1, -1, 1), None)
        self.assertEqual(test(-1, 1, -1, 1, 1, 0, -1), None)
        self.assertEqual(test(-1, 1, -1, 1, 1, 0, 0), None)
        self.assertEqual(test(-1, 1, -1, 1, 1, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, -1, 1, 1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, -1, 1, 1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 0, -1, -1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 1, 0, -1, -1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 1, 0, -1, -1, 0, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, 0, -1, -1, 0, 0), None)
        self.assertEqual(test(-1, 1, 0, -1, -1, 0, 1), None)
        self.assertEqual(test(-1, 1, 0, -1, -1, 1, -1), None)
        self.assertEqual(test(-1, 1, 0, -1, -1, 1, 0), None)
        self.assertEqual(test(-1, 1, 0, -1, -1, 1, 1), None)
        self.assertEqual(test(-1, 1, 0, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, 0, -1, 0, -1, 0), None)
        self.assertEqual(test(-1, 1, 0, -1, 0, -1, 1), None)
        self.assertEqual(test(-1, 1, 0, -1, 0, 0, -1), None)
        self.assertEqual(test(-1, 1, 0, -1, 0, 0, 1), None)
        self.assertEqual(test(-1, 1, 0, -1, 0, 1, -1), None)
        self.assertEqual(test(-1, 1, 0, -1, 0, 1, 0), None)
        self.assertEqual(test(-1, 1, 0, -1, 0, 1, 1), None)
        self.assertEqual(test(-1, 1, 0, -1, 1, -1, -1), None)
        self.assertEqual(test(-1, 1, 0, -1, 1, -1, 0), None)
        self.assertEqual(test(-1, 1, 0, -1, 1, -1, 1), None)
        self.assertEqual(test(-1, 1, 0, -1, 1, 0, -1), None)
        self.assertEqual(test(-1, 1, 0, -1, 1, 0, 0), None)
        self.assertEqual(test(-1, 1, 0, -1, 1, 0, 1), None)
        self.assertEqual(test(-1, 1, 0, -1, 1, 1, -1), None)
        self.assertEqual(test(-1, 1, 0, -1, 1, 1, 0), None)
        self.assertEqual(test(-1, 1, 0, 1, -1, -1, 0), None)
        self.assertEqual(test(-1, 1, 0, 1, -1, -1, 1), None)
        self.assertEqual(test(-1, 1, 0, 1, -1, 0, -1), None)
        self.assertEqual(test(-1, 1, 0, 1, -1, 0, 0), None)
        self.assertEqual(test(-1, 1, 0, 1, -1, 0, 1), None)
        self.assertEqual(test(-1, 1, 0, 1, -1, 1, -1), None)
        self.assertEqual(test(-1, 1, 0, 1, -1, 1, 0), None)
        self.assertEqual(test(-1, 1, 0, 1, -1, 1, 1), None)
        self.assertEqual(test(-1, 1, 0, 1, 0, -1, -1), None)
        self.assertEqual(test(-1, 1, 0, 1, 0, -1, 0), None)
        self.assertEqual(test(-1, 1, 0, 1, 0, -1, 1), None)
        self.assertEqual(test(-1, 1, 0, 1, 0, 0, -1), None)
        self.assertEqual(test(-1, 1, 0, 1, 0, 0, 1), None)
        self.assertEqual(test(-1, 1, 0, 1, 0, 1, -1), None)
        self.assertEqual(test(-1, 1, 0, 1, 0, 1, 0), None)
        self.assertEqual(test(-1, 1, 0, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, 0, 1, 1, -1, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, 0, 1, 1, -1, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, 0, 1, 1, -1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, 0, 1, 1, 0, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, 0, 1, 1, 0, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, 0, 1, 1, 0, 1), SpaceProperies.WHITE_DOUBLE_CHECK)
        self.assertEqual(test(-1, 1, 0, 1, 1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 0, 1, 1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, -1, -1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 1, 1, -1, -1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(-1, 1, 1, -1, -1, 0, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, 1, -1, -1, 0, 0), None)
        self.assertEqual(test(-1, 1, 1, -1, -1, 0, 1), None)
        self.assertEqual(test(-1, 1, 1, -1, -1, 1, -1), None)
        self.assertEqual(test(-1, 1, 1, -1, -1, 1, 0), None)
        self.assertEqual(test(-1, 1, 1, -1, -1, 1, 1), None)
        self.assertEqual(test(-1, 1, 1, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(-1, 1, 1, -1, 0, -1, 0), None)
        self.assertEqual(test(-1, 1, 1, -1, 0, -1, 1), None)
        self.assertEqual(test(-1, 1, 1, -1, 0, 0, -1), None)
        self.assertEqual(test(-1, 1, 1, -1, 0, 0, 1), None)
        self.assertEqual(test(-1, 1, 1, -1, 0, 1, -1), None)
        self.assertEqual(test(-1, 1, 1, -1, 0, 1, 0), None)
        self.assertEqual(test(-1, 1, 1, -1, 0, 1, 1), None)
        self.assertEqual(test(-1, 1, 1, -1, 1, -1, -1), None)
        self.assertEqual(test(-1, 1, 1, -1, 1, -1, 0), None)
        self.assertEqual(test(-1, 1, 1, -1, 1, -1, 1), None)
        self.assertEqual(test(-1, 1, 1, -1, 1, 0, -1), None)
        self.assertEqual(test(-1, 1, 1, -1, 1, 0, 0), None)
        self.assertEqual(test(-1, 1, 1, -1, 1, 0, 1), None)
        self.assertEqual(test(-1, 1, 1, -1, 1, 1, -1), None)
        self.assertEqual(test(-1, 1, 1, -1, 1, 1, 0), None)
        self.assertEqual(test(-1, 1, 1, 1, -1, -1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, -1, -1, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, -1, 0, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, -1, 0, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, -1, 0, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, -1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, -1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, -1, 1, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, 0, -1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, 0, -1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, 0, -1, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, 0, 0, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, 0, 0, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, 0, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, 0, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, 0, 1, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(-1, 1, 1, 1, 1, -1, -1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(-1, 1, 1, 1, 1, -1, 0), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(-1, 1, 1, 1, 1, -1, 1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(-1, 1, 1, 1, 1, 0, -1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(-1, 1, 1, 1, 1, 0, 0), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(-1, 1, 1, 1, 1, 0, 1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(-1, 1, 1, 1, 1, 1, -1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(-1, 1, 1, 1, 1, 1, 0), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(0, -1, -1, -1, -1, -1, 0), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(0, -1, -1, -1, -1, -1, 1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(0, -1, -1, -1, -1, 0, -1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(0, -1, -1, -1, -1, 0, 0), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(0, -1, -1, -1, -1, 0, 1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(0, -1, -1, -1, -1, 1, -1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(0, -1, -1, -1, -1, 1, 0), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(0, -1, -1, -1, -1, 1, 1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(0, -1, -1, -1, 0, -1, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 0, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 0, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 0, 0, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 0, 0, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 0, 1, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 0, 1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 0, 1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 1, -1, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 1, 0, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 1, 0, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 1, 0, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 1, 1, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, -1, 1, 1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, -1, 1, -1, -1, 0), None)
        self.assertEqual(test(0, -1, -1, 1, -1, -1, 1), None)
        self.assertEqual(test(0, -1, -1, 1, -1, 0, -1), None)
        self.assertEqual(test(0, -1, -1, 1, -1, 0, 0), None)
        self.assertEqual(test(0, -1, -1, 1, -1, 0, 1), None)
        self.assertEqual(test(0, -1, -1, 1, -1, 1, -1), None)
        self.assertEqual(test(0, -1, -1, 1, -1, 1, 0), None)
        self.assertEqual(test(0, -1, -1, 1, -1, 1, 1), None)
        self.assertEqual(test(0, -1, -1, 1, 0, -1, -1), None)
        self.assertEqual(test(0, -1, -1, 1, 0, -1, 0), None)
        self.assertEqual(test(0, -1, -1, 1, 0, -1, 1), None)
        self.assertEqual(test(0, -1, -1, 1, 0, 0, -1), None)
        self.assertEqual(test(0, -1, -1, 1, 0, 0, 1), None)
        self.assertEqual(test(0, -1, -1, 1, 0, 1, -1), None)
        self.assertEqual(test(0, -1, -1, 1, 0, 1, 0), None)
        self.assertEqual(test(0, -1, -1, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, -1, -1, 1, 1, -1, -1), None)
        self.assertEqual(test(0, -1, -1, 1, 1, -1, 0), None)
        self.assertEqual(test(0, -1, -1, 1, 1, -1, 1), None)
        self.assertEqual(test(0, -1, -1, 1, 1, 0, -1), None)
        self.assertEqual(test(0, -1, -1, 1, 1, 0, 0), None)
        self.assertEqual(test(0, -1, -1, 1, 1, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, -1, -1, 1, 1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, -1, -1, 1, 1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, -1, 0, -1, -1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, 0, -1, -1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, 0, -1, -1, 0, -1), SpaceProperies.BLACK_DOUBLE_CHECK)
        self.assertEqual(test(0, -1, 0, -1, -1, 0, 0), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, -1, 0, -1, -1, 0, 1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, -1, 0, -1, -1, 1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, -1, 0, -1, -1, 1, 0), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, -1, 0, -1, -1, 1, 1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, -1, 0, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, -1, 0, -1, 0, -1, 0), None)
        self.assertEqual(test(0, -1, 0, -1, 0, -1, 1), None)
        self.assertEqual(test(0, -1, 0, -1, 0, 0, -1), None)
        self.assertEqual(test(0, -1, 0, -1, 0, 0, 1), None)
        self.assertEqual(test(0, -1, 0, -1, 0, 1, -1), None)
        self.assertEqual(test(0, -1, 0, -1, 0, 1, 0), None)
        self.assertEqual(test(0, -1, 0, -1, 0, 1, 1), None)
        self.assertEqual(test(0, -1, 0, -1, 1, -1, -1), None)
        self.assertEqual(test(0, -1, 0, -1, 1, -1, 0), None)
        self.assertEqual(test(0, -1, 0, -1, 1, -1, 1), None)
        self.assertEqual(test(0, -1, 0, -1, 1, 0, -1), None)
        self.assertEqual(test(0, -1, 0, -1, 1, 0, 0), None)
        self.assertEqual(test(0, -1, 0, -1, 1, 0, 1), None)
        self.assertEqual(test(0, -1, 0, -1, 1, 1, -1), None)
        self.assertEqual(test(0, -1, 0, -1, 1, 1, 0), None)
        self.assertEqual(test(0, -1, 0, 1, -1, -1, 0), None)
        self.assertEqual(test(0, -1, 0, 1, -1, -1, 1), None)
        self.assertEqual(test(0, -1, 0, 1, -1, 0, -1), None)
        self.assertEqual(test(0, -1, 0, 1, -1, 0, 0), None)
        self.assertEqual(test(0, -1, 0, 1, -1, 0, 1), None)
        self.assertEqual(test(0, -1, 0, 1, -1, 1, -1), None)
        self.assertEqual(test(0, -1, 0, 1, -1, 1, 0), None)
        self.assertEqual(test(0, -1, 0, 1, -1, 1, 1), None)
        self.assertEqual(test(0, -1, 0, 1, 0, -1, -1), None)
        self.assertEqual(test(0, -1, 0, 1, 0, -1, 0), None)
        self.assertEqual(test(0, -1, 0, 1, 0, -1, 1), None)
        self.assertEqual(test(0, -1, 0, 1, 0, 0, -1), None)
        self.assertEqual(test(0, -1, 0, 1, 0, 0, 1), None)
        self.assertEqual(test(0, -1, 0, 1, 0, 1, -1), None)
        self.assertEqual(test(0, -1, 0, 1, 0, 1, 0), None)
        self.assertEqual(test(0, -1, 0, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, -1, 0, 1, 1, -1, -1), None)
        self.assertEqual(test(0, -1, 0, 1, 1, -1, 0), None)
        self.assertEqual(test(0, -1, 0, 1, 1, -1, 1), None)
        self.assertEqual(test(0, -1, 0, 1, 1, 0, -1), None)
        self.assertEqual(test(0, -1, 0, 1, 1, 0, 0), None)
        self.assertEqual(test(0, -1, 0, 1, 1, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, -1, 0, 1, 1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, -1, 0, 1, 1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, -1, 1, -1, -1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, 1, -1, -1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, -1, 1, -1, -1, 0, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, -1, 1, -1, -1, 0, 0), None)
        self.assertEqual(test(0, -1, 1, -1, -1, 0, 1), None)
        self.assertEqual(test(0, -1, 1, -1, -1, 1, -1), None)
        self.assertEqual(test(0, -1, 1, -1, -1, 1, 0), None)
        self.assertEqual(test(0, -1, 1, -1, -1, 1, 1), None)
        self.assertEqual(test(0, -1, 1, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, -1, 1, -1, 0, -1, 0), None)
        self.assertEqual(test(0, -1, 1, -1, 0, -1, 1), None)
        self.assertEqual(test(0, -1, 1, -1, 0, 0, -1), None)
        self.assertEqual(test(0, -1, 1, -1, 0, 0, 1), None)
        self.assertEqual(test(0, -1, 1, -1, 0, 1, -1), None)
        self.assertEqual(test(0, -1, 1, -1, 0, 1, 0), None)
        self.assertEqual(test(0, -1, 1, -1, 0, 1, 1), None)
        self.assertEqual(test(0, -1, 1, -1, 1, -1, -1), None)
        self.assertEqual(test(0, -1, 1, -1, 1, -1, 0), None)
        self.assertEqual(test(0, -1, 1, -1, 1, -1, 1), None)
        self.assertEqual(test(0, -1, 1, -1, 1, 0, -1), None)
        self.assertEqual(test(0, -1, 1, -1, 1, 0, 0), None)
        self.assertEqual(test(0, -1, 1, -1, 1, 0, 1), None)
        self.assertEqual(test(0, -1, 1, -1, 1, 1, -1), None)
        self.assertEqual(test(0, -1, 1, -1, 1, 1, 0), None)
        self.assertEqual(test(0, -1, 1, 1, -1, -1, 0), None)
        self.assertEqual(test(0, -1, 1, 1, -1, -1, 1), None)
        self.assertEqual(test(0, -1, 1, 1, -1, 0, -1), None)
        self.assertEqual(test(0, -1, 1, 1, -1, 0, 0), None)
        self.assertEqual(test(0, -1, 1, 1, -1, 0, 1), None)
        self.assertEqual(test(0, -1, 1, 1, -1, 1, -1), None)
        self.assertEqual(test(0, -1, 1, 1, -1, 1, 0), None)
        self.assertEqual(test(0, -1, 1, 1, -1, 1, 1), None)
        self.assertEqual(test(0, -1, 1, 1, 0, -1, -1), None)
        self.assertEqual(test(0, -1, 1, 1, 0, -1, 0), None)
        self.assertEqual(test(0, -1, 1, 1, 0, -1, 1), None)
        self.assertEqual(test(0, -1, 1, 1, 0, 0, -1), None)
        self.assertEqual(test(0, -1, 1, 1, 0, 0, 1), None)
        self.assertEqual(test(0, -1, 1, 1, 0, 1, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, -1, 1, 1, 0, 1, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, -1, 1, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, -1, 1, 1, 1, -1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, -1, 1, 1, 1, -1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, -1, 1, 1, 1, -1, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, -1, 1, 1, 1, 0, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, -1, 1, 1, 1, 0, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, -1, 1, 1, 1, 0, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, -1, 1, 1, 1, 1, -1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(0, -1, 1, 1, 1, 1, 0), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(0, 0, -1, -1, -1, -1, 0), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(0, 0, -1, -1, -1, -1, 1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(0, 0, -1, -1, -1, 0, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 0, -1, -1, -1, 0, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 0, -1, -1, -1, 0, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 0, -1, -1, -1, 1, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 0, -1, -1, -1, 1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 0, -1, -1, -1, 1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 0, -1, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, 0, -1, -1, 0, -1, 0), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, 0, -1, -1, 0, -1, 1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, 0, -1, -1, 0, 0, -1), None)
        self.assertEqual(test(0, 0, -1, -1, 0, 0, 1), None)
        self.assertEqual(test(0, 0, -1, -1, 0, 1, -1), None)
        self.assertEqual(test(0, 0, -1, -1, 0, 1, 0), None)
        self.assertEqual(test(0, 0, -1, -1, 0, 1, 1), None)
        self.assertEqual(test(0, 0, -1, -1, 1, -1, -1), None)
        self.assertEqual(test(0, 0, -1, -1, 1, -1, 0), None)
        self.assertEqual(test(0, 0, -1, -1, 1, -1, 1), None)
        self.assertEqual(test(0, 0, -1, -1, 1, 0, -1), None)
        self.assertEqual(test(0, 0, -1, -1, 1, 0, 0), None)
        self.assertEqual(test(0, 0, -1, -1, 1, 0, 1), None)
        self.assertEqual(test(0, 0, -1, -1, 1, 1, -1), None)
        self.assertEqual(test(0, 0, -1, -1, 1, 1, 0), None)
        self.assertEqual(test(0, 0, -1, 1, -1, -1, 0), None)
        self.assertEqual(test(0, 0, -1, 1, -1, -1, 1), None)
        self.assertEqual(test(0, 0, -1, 1, -1, 0, -1), None)
        self.assertEqual(test(0, 0, -1, 1, -1, 0, 0), None)
        self.assertEqual(test(0, 0, -1, 1, -1, 0, 1), None)
        self.assertEqual(test(0, 0, -1, 1, -1, 1, -1), None)
        self.assertEqual(test(0, 0, -1, 1, -1, 1, 0), None)
        self.assertEqual(test(0, 0, -1, 1, -1, 1, 1), None)
        self.assertEqual(test(0, 0, -1, 1, 0, -1, -1), None)
        self.assertEqual(test(0, 0, -1, 1, 0, -1, 0), None)
        self.assertEqual(test(0, 0, -1, 1, 0, -1, 1), None)
        self.assertEqual(test(0, 0, -1, 1, 0, 0, -1), None)
        self.assertEqual(test(0, 0, -1, 1, 0, 0, 1), None)
        self.assertEqual(test(0, 0, -1, 1, 0, 1, -1), None)
        self.assertEqual(test(0, 0, -1, 1, 0, 1, 0), None)
        self.assertEqual(test(0, 0, -1, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, 0, -1, 1, 1, -1, -1), None)
        self.assertEqual(test(0, 0, -1, 1, 1, -1, 0), None)
        self.assertEqual(test(0, 0, -1, 1, 1, -1, 1), None)
        self.assertEqual(test(0, 0, -1, 1, 1, 0, -1), None)
        self.assertEqual(test(0, 0, -1, 1, 1, 0, 0), None)
        self.assertEqual(test(0, 0, -1, 1, 1, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, 0, -1, 1, 1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 0, -1, 1, 1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 0, 1, -1, -1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 0, 1, -1, -1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 0, 1, -1, -1, 0, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, 0, 1, -1, -1, 0, 0), None)
        self.assertEqual(test(0, 0, 1, -1, -1, 0, 1), None)
        self.assertEqual(test(0, 0, 1, -1, -1, 1, -1), None)
        self.assertEqual(test(0, 0, 1, -1, -1, 1, 0), None)
        self.assertEqual(test(0, 0, 1, -1, -1, 1, 1), None)
        self.assertEqual(test(0, 0, 1, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, 0, 1, -1, 0, -1, 0), None)
        self.assertEqual(test(0, 0, 1, -1, 0, -1, 1), None)
        self.assertEqual(test(0, 0, 1, -1, 0, 0, -1), None)
        self.assertEqual(test(0, 0, 1, -1, 0, 0, 1), None)
        self.assertEqual(test(0, 0, 1, -1, 0, 1, -1), None)
        self.assertEqual(test(0, 0, 1, -1, 0, 1, 0), None)
        self.assertEqual(test(0, 0, 1, -1, 0, 1, 1), None)
        self.assertEqual(test(0, 0, 1, -1, 1, -1, -1), None)
        self.assertEqual(test(0, 0, 1, -1, 1, -1, 0), None)
        self.assertEqual(test(0, 0, 1, -1, 1, -1, 1), None)
        self.assertEqual(test(0, 0, 1, -1, 1, 0, -1), None)
        self.assertEqual(test(0, 0, 1, -1, 1, 0, 0), None)
        self.assertEqual(test(0, 0, 1, -1, 1, 0, 1), None)
        self.assertEqual(test(0, 0, 1, -1, 1, 1, -1), None)
        self.assertEqual(test(0, 0, 1, -1, 1, 1, 0), None)
        self.assertEqual(test(0, 0, 1, 1, -1, -1, 0), None)
        self.assertEqual(test(0, 0, 1, 1, -1, -1, 1), None)
        self.assertEqual(test(0, 0, 1, 1, -1, 0, -1), None)
        self.assertEqual(test(0, 0, 1, 1, -1, 0, 0), None)
        self.assertEqual(test(0, 0, 1, 1, -1, 0, 1), None)
        self.assertEqual(test(0, 0, 1, 1, -1, 1, -1), None)
        self.assertEqual(test(0, 0, 1, 1, -1, 1, 0), None)
        self.assertEqual(test(0, 0, 1, 1, -1, 1, 1), None)
        self.assertEqual(test(0, 0, 1, 1, 0, -1, -1), None)
        self.assertEqual(test(0, 0, 1, 1, 0, -1, 0), None)
        self.assertEqual(test(0, 0, 1, 1, 0, -1, 1), None)
        self.assertEqual(test(0, 0, 1, 1, 0, 0, -1), None)
        self.assertEqual(test(0, 0, 1, 1, 0, 0, 1), None)
        self.assertEqual(test(0, 0, 1, 1, 0, 1, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, 0, 1, 1, 0, 1, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, 0, 1, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, 0, 1, 1, 1, -1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 0, 1, 1, 1, -1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 0, 1, 1, 1, -1, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 0, 1, 1, 1, 0, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 0, 1, 1, 1, 0, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 0, 1, 1, 1, 0, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 0, 1, 1, 1, 1, -1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(0, 0, 1, 1, 1, 1, 0), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(0, 1, -1, -1, -1, -1, 0), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(0, 1, -1, -1, -1, -1, 1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(0, 1, -1, -1, -1, 0, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 1, -1, -1, -1, 0, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 1, -1, -1, -1, 0, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 1, -1, -1, -1, 1, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 1, -1, -1, -1, 1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 1, -1, -1, -1, 1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 1, -1, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, 1, -1, -1, 0, -1, 0), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, 1, -1, -1, 0, -1, 1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, 1, -1, -1, 0, 0, -1), None)
        self.assertEqual(test(0, 1, -1, -1, 0, 0, 1), None)
        self.assertEqual(test(0, 1, -1, -1, 0, 1, -1), None)
        self.assertEqual(test(0, 1, -1, -1, 0, 1, 0), None)
        self.assertEqual(test(0, 1, -1, -1, 0, 1, 1), None)
        self.assertEqual(test(0, 1, -1, -1, 1, -1, -1), None)
        self.assertEqual(test(0, 1, -1, -1, 1, -1, 0), None)
        self.assertEqual(test(0, 1, -1, -1, 1, -1, 1), None)
        self.assertEqual(test(0, 1, -1, -1, 1, 0, -1), None)
        self.assertEqual(test(0, 1, -1, -1, 1, 0, 0), None)
        self.assertEqual(test(0, 1, -1, -1, 1, 0, 1), None)
        self.assertEqual(test(0, 1, -1, -1, 1, 1, -1), None)
        self.assertEqual(test(0, 1, -1, -1, 1, 1, 0), None)
        self.assertEqual(test(0, 1, -1, 1, -1, -1, 0), None)
        self.assertEqual(test(0, 1, -1, 1, -1, -1, 1), None)
        self.assertEqual(test(0, 1, -1, 1, -1, 0, -1), None)
        self.assertEqual(test(0, 1, -1, 1, -1, 0, 0), None)
        self.assertEqual(test(0, 1, -1, 1, -1, 0, 1), None)
        self.assertEqual(test(0, 1, -1, 1, -1, 1, -1), None)
        self.assertEqual(test(0, 1, -1, 1, -1, 1, 0), None)
        self.assertEqual(test(0, 1, -1, 1, -1, 1, 1), None)
        self.assertEqual(test(0, 1, -1, 1, 0, -1, -1), None)
        self.assertEqual(test(0, 1, -1, 1, 0, -1, 0), None)
        self.assertEqual(test(0, 1, -1, 1, 0, -1, 1), None)
        self.assertEqual(test(0, 1, -1, 1, 0, 0, -1), None)
        self.assertEqual(test(0, 1, -1, 1, 0, 0, 1), None)
        self.assertEqual(test(0, 1, -1, 1, 0, 1, -1), None)
        self.assertEqual(test(0, 1, -1, 1, 0, 1, 0), None)
        self.assertEqual(test(0, 1, -1, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, 1, -1, 1, 1, -1, -1), None)
        self.assertEqual(test(0, 1, -1, 1, 1, -1, 0), None)
        self.assertEqual(test(0, 1, -1, 1, 1, -1, 1), None)
        self.assertEqual(test(0, 1, -1, 1, 1, 0, -1), None)
        self.assertEqual(test(0, 1, -1, 1, 1, 0, 0), None)
        self.assertEqual(test(0, 1, -1, 1, 1, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, 1, -1, 1, 1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, -1, 1, 1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 0, -1, -1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 1, 0, -1, -1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 1, 0, -1, -1, 0, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, 1, 0, -1, -1, 0, 0), None)
        self.assertEqual(test(0, 1, 0, -1, -1, 0, 1), None)
        self.assertEqual(test(0, 1, 0, -1, -1, 1, -1), None)
        self.assertEqual(test(0, 1, 0, -1, -1, 1, 0), None)
        self.assertEqual(test(0, 1, 0, -1, -1, 1, 1), None)
        self.assertEqual(test(0, 1, 0, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, 1, 0, -1, 0, -1, 0), None)
        self.assertEqual(test(0, 1, 0, -1, 0, -1, 1), None)
        self.assertEqual(test(0, 1, 0, -1, 0, 0, -1), None)
        self.assertEqual(test(0, 1, 0, -1, 0, 0, 1), None)
        self.assertEqual(test(0, 1, 0, -1, 0, 1, -1), None)
        self.assertEqual(test(0, 1, 0, -1, 0, 1, 0), None)
        self.assertEqual(test(0, 1, 0, -1, 0, 1, 1), None)
        self.assertEqual(test(0, 1, 0, -1, 1, -1, -1), None)
        self.assertEqual(test(0, 1, 0, -1, 1, -1, 0), None)
        self.assertEqual(test(0, 1, 0, -1, 1, -1, 1), None)
        self.assertEqual(test(0, 1, 0, -1, 1, 0, -1), None)
        self.assertEqual(test(0, 1, 0, -1, 1, 0, 0), None)
        self.assertEqual(test(0, 1, 0, -1, 1, 0, 1), None)
        self.assertEqual(test(0, 1, 0, -1, 1, 1, -1), None)
        self.assertEqual(test(0, 1, 0, -1, 1, 1, 0), None)
        self.assertEqual(test(0, 1, 0, 1, -1, -1, 0), None)
        self.assertEqual(test(0, 1, 0, 1, -1, -1, 1), None)
        self.assertEqual(test(0, 1, 0, 1, -1, 0, -1), None)
        self.assertEqual(test(0, 1, 0, 1, -1, 0, 0), None)
        self.assertEqual(test(0, 1, 0, 1, -1, 0, 1), None)
        self.assertEqual(test(0, 1, 0, 1, -1, 1, -1), None)
        self.assertEqual(test(0, 1, 0, 1, -1, 1, 0), None)
        self.assertEqual(test(0, 1, 0, 1, -1, 1, 1), None)
        self.assertEqual(test(0, 1, 0, 1, 0, -1, -1), None)
        self.assertEqual(test(0, 1, 0, 1, 0, -1, 0), None)
        self.assertEqual(test(0, 1, 0, 1, 0, -1, 1), None)
        self.assertEqual(test(0, 1, 0, 1, 0, 0, -1), None)
        self.assertEqual(test(0, 1, 0, 1, 0, 0, 1), None)
        self.assertEqual(test(0, 1, 0, 1, 0, 1, -1), None)
        self.assertEqual(test(0, 1, 0, 1, 0, 1, 0), None)
        self.assertEqual(test(0, 1, 0, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, 1, 0, 1, 1, -1, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, 1, 0, 1, 1, -1, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, 1, 0, 1, 1, -1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, 1, 0, 1, 1, 0, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, 1, 0, 1, 1, 0, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(0, 1, 0, 1, 1, 0, 1), SpaceProperies.WHITE_DOUBLE_CHECK)
        self.assertEqual(test(0, 1, 0, 1, 1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 0, 1, 1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, -1, -1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 1, 1, -1, -1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(0, 1, 1, -1, -1, 0, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, 1, 1, -1, -1, 0, 0), None)
        self.assertEqual(test(0, 1, 1, -1, -1, 0, 1), None)
        self.assertEqual(test(0, 1, 1, -1, -1, 1, -1), None)
        self.assertEqual(test(0, 1, 1, -1, -1, 1, 0), None)
        self.assertEqual(test(0, 1, 1, -1, -1, 1, 1), None)
        self.assertEqual(test(0, 1, 1, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(0, 1, 1, -1, 0, -1, 0), None)
        self.assertEqual(test(0, 1, 1, -1, 0, -1, 1), None)
        self.assertEqual(test(0, 1, 1, -1, 0, 0, -1), None)
        self.assertEqual(test(0, 1, 1, -1, 0, 0, 1), None)
        self.assertEqual(test(0, 1, 1, -1, 0, 1, -1), None)
        self.assertEqual(test(0, 1, 1, -1, 0, 1, 0), None)
        self.assertEqual(test(0, 1, 1, -1, 0, 1, 1), None)
        self.assertEqual(test(0, 1, 1, -1, 1, -1, -1), None)
        self.assertEqual(test(0, 1, 1, -1, 1, -1, 0), None)
        self.assertEqual(test(0, 1, 1, -1, 1, -1, 1), None)
        self.assertEqual(test(0, 1, 1, -1, 1, 0, -1), None)
        self.assertEqual(test(0, 1, 1, -1, 1, 0, 0), None)
        self.assertEqual(test(0, 1, 1, -1, 1, 0, 1), None)
        self.assertEqual(test(0, 1, 1, -1, 1, 1, -1), None)
        self.assertEqual(test(0, 1, 1, -1, 1, 1, 0), None)
        self.assertEqual(test(0, 1, 1, 1, -1, -1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, -1, -1, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, -1, 0, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, -1, 0, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, -1, 0, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, -1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, -1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, -1, 1, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, 0, -1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, 0, -1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, 0, -1, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, 0, 0, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, 0, 0, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, 0, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, 0, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, 0, 1, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(0, 1, 1, 1, 1, -1, -1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(0, 1, 1, 1, 1, -1, 0), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(0, 1, 1, 1, 1, -1, 1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(0, 1, 1, 1, 1, 0, -1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(0, 1, 1, 1, 1, 0, 0), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(0, 1, 1, 1, 1, 0, 1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(0, 1, 1, 1, 1, 1, -1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(0, 1, 1, 1, 1, 1, 0), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(1, -1, -1, -1, -1, -1, 0), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(1, -1, -1, -1, -1, -1, 1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(1, -1, -1, -1, -1, 0, -1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(1, -1, -1, -1, -1, 0, 0), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(1, -1, -1, -1, -1, 0, 1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(1, -1, -1, -1, -1, 1, -1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(1, -1, -1, -1, -1, 1, 0), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(1, -1, -1, -1, -1, 1, 1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(1, -1, -1, -1, 0, -1, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 0, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 0, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 0, 0, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 0, 0, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 0, 1, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 0, 1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 0, 1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 1, -1, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 1, 0, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 1, 0, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 1, 0, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 1, 1, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, -1, 1, 1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, -1, 1, -1, -1, 0), None)
        self.assertEqual(test(1, -1, -1, 1, -1, -1, 1), None)
        self.assertEqual(test(1, -1, -1, 1, -1, 0, -1), None)
        self.assertEqual(test(1, -1, -1, 1, -1, 0, 0), None)
        self.assertEqual(test(1, -1, -1, 1, -1, 0, 1), None)
        self.assertEqual(test(1, -1, -1, 1, -1, 1, -1), None)
        self.assertEqual(test(1, -1, -1, 1, -1, 1, 0), None)
        self.assertEqual(test(1, -1, -1, 1, -1, 1, 1), None)
        self.assertEqual(test(1, -1, -1, 1, 0, -1, -1), None)
        self.assertEqual(test(1, -1, -1, 1, 0, -1, 0), None)
        self.assertEqual(test(1, -1, -1, 1, 0, -1, 1), None)
        self.assertEqual(test(1, -1, -1, 1, 0, 0, -1), None)
        self.assertEqual(test(1, -1, -1, 1, 0, 0, 1), None)
        self.assertEqual(test(1, -1, -1, 1, 0, 1, -1), None)
        self.assertEqual(test(1, -1, -1, 1, 0, 1, 0), None)
        self.assertEqual(test(1, -1, -1, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, -1, -1, 1, 1, -1, -1), None)
        self.assertEqual(test(1, -1, -1, 1, 1, -1, 0), None)
        self.assertEqual(test(1, -1, -1, 1, 1, -1, 1), None)
        self.assertEqual(test(1, -1, -1, 1, 1, 0, -1), None)
        self.assertEqual(test(1, -1, -1, 1, 1, 0, 0), None)
        self.assertEqual(test(1, -1, -1, 1, 1, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, -1, -1, 1, 1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, -1, -1, 1, 1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, -1, 0, -1, -1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, 0, -1, -1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, 0, -1, -1, 0, -1), SpaceProperies.BLACK_DOUBLE_CHECK)
        self.assertEqual(test(1, -1, 0, -1, -1, 0, 0), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, -1, 0, -1, -1, 0, 1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, -1, 0, -1, -1, 1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, -1, 0, -1, -1, 1, 0), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, -1, 0, -1, -1, 1, 1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, -1, 0, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, -1, 0, -1, 0, -1, 0), None)
        self.assertEqual(test(1, -1, 0, -1, 0, -1, 1), None)
        self.assertEqual(test(1, -1, 0, -1, 0, 0, -1), None)
        self.assertEqual(test(1, -1, 0, -1, 0, 0, 1), None)
        self.assertEqual(test(1, -1, 0, -1, 0, 1, -1), None)
        self.assertEqual(test(1, -1, 0, -1, 0, 1, 0), None)
        self.assertEqual(test(1, -1, 0, -1, 0, 1, 1), None)
        self.assertEqual(test(1, -1, 0, -1, 1, -1, -1), None)
        self.assertEqual(test(1, -1, 0, -1, 1, -1, 0), None)
        self.assertEqual(test(1, -1, 0, -1, 1, -1, 1), None)
        self.assertEqual(test(1, -1, 0, -1, 1, 0, -1), None)
        self.assertEqual(test(1, -1, 0, -1, 1, 0, 0), None)
        self.assertEqual(test(1, -1, 0, -1, 1, 0, 1), None)
        self.assertEqual(test(1, -1, 0, -1, 1, 1, -1), None)
        self.assertEqual(test(1, -1, 0, -1, 1, 1, 0), None)
        self.assertEqual(test(1, -1, 0, 1, -1, -1, 0), None)
        self.assertEqual(test(1, -1, 0, 1, -1, -1, 1), None)
        self.assertEqual(test(1, -1, 0, 1, -1, 0, -1), None)
        self.assertEqual(test(1, -1, 0, 1, -1, 0, 0), None)
        self.assertEqual(test(1, -1, 0, 1, -1, 0, 1), None)
        self.assertEqual(test(1, -1, 0, 1, -1, 1, -1), None)
        self.assertEqual(test(1, -1, 0, 1, -1, 1, 0), None)
        self.assertEqual(test(1, -1, 0, 1, -1, 1, 1), None)
        self.assertEqual(test(1, -1, 0, 1, 0, -1, -1), None)
        self.assertEqual(test(1, -1, 0, 1, 0, -1, 0), None)
        self.assertEqual(test(1, -1, 0, 1, 0, -1, 1), None)
        self.assertEqual(test(1, -1, 0, 1, 0, 0, -1), None)
        self.assertEqual(test(1, -1, 0, 1, 0, 0, 1), None)
        self.assertEqual(test(1, -1, 0, 1, 0, 1, -1), None)
        self.assertEqual(test(1, -1, 0, 1, 0, 1, 0), None)
        self.assertEqual(test(1, -1, 0, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, -1, 0, 1, 1, -1, -1), None)
        self.assertEqual(test(1, -1, 0, 1, 1, -1, 0), None)
        self.assertEqual(test(1, -1, 0, 1, 1, -1, 1), None)
        self.assertEqual(test(1, -1, 0, 1, 1, 0, -1), None)
        self.assertEqual(test(1, -1, 0, 1, 1, 0, 0), None)
        self.assertEqual(test(1, -1, 0, 1, 1, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, -1, 0, 1, 1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, -1, 0, 1, 1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, -1, 1, -1, -1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, 1, -1, -1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, -1, 1, -1, -1, 0, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, -1, 1, -1, -1, 0, 0), None)
        self.assertEqual(test(1, -1, 1, -1, -1, 0, 1), None)
        self.assertEqual(test(1, -1, 1, -1, -1, 1, -1), None)
        self.assertEqual(test(1, -1, 1, -1, -1, 1, 0), None)
        self.assertEqual(test(1, -1, 1, -1, -1, 1, 1), None)
        self.assertEqual(test(1, -1, 1, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, -1, 1, -1, 0, -1, 0), None)
        self.assertEqual(test(1, -1, 1, -1, 0, -1, 1), None)
        self.assertEqual(test(1, -1, 1, -1, 0, 0, -1), None)
        self.assertEqual(test(1, -1, 1, -1, 0, 0, 1), None)
        self.assertEqual(test(1, -1, 1, -1, 0, 1, -1), None)
        self.assertEqual(test(1, -1, 1, -1, 0, 1, 0), None)
        self.assertEqual(test(1, -1, 1, -1, 0, 1, 1), None)
        self.assertEqual(test(1, -1, 1, -1, 1, -1, -1), None)
        self.assertEqual(test(1, -1, 1, -1, 1, -1, 0), None)
        self.assertEqual(test(1, -1, 1, -1, 1, -1, 1), None)
        self.assertEqual(test(1, -1, 1, -1, 1, 0, -1), None)
        self.assertEqual(test(1, -1, 1, -1, 1, 0, 0), None)
        self.assertEqual(test(1, -1, 1, -1, 1, 0, 1), None)
        self.assertEqual(test(1, -1, 1, -1, 1, 1, -1), None)
        self.assertEqual(test(1, -1, 1, -1, 1, 1, 0), None)
        self.assertEqual(test(1, -1, 1, 1, -1, -1, 0), None)
        self.assertEqual(test(1, -1, 1, 1, -1, -1, 1), None)
        self.assertEqual(test(1, -1, 1, 1, -1, 0, -1), None)
        self.assertEqual(test(1, -1, 1, 1, -1, 0, 0), None)
        self.assertEqual(test(1, -1, 1, 1, -1, 0, 1), None)
        self.assertEqual(test(1, -1, 1, 1, -1, 1, -1), None)
        self.assertEqual(test(1, -1, 1, 1, -1, 1, 0), None)
        self.assertEqual(test(1, -1, 1, 1, -1, 1, 1), None)
        self.assertEqual(test(1, -1, 1, 1, 0, -1, -1), None)
        self.assertEqual(test(1, -1, 1, 1, 0, -1, 0), None)
        self.assertEqual(test(1, -1, 1, 1, 0, -1, 1), None)
        self.assertEqual(test(1, -1, 1, 1, 0, 0, -1), None)
        self.assertEqual(test(1, -1, 1, 1, 0, 0, 1), None)
        self.assertEqual(test(1, -1, 1, 1, 0, 1, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, -1, 1, 1, 0, 1, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, -1, 1, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, -1, 1, 1, 1, -1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, -1, 1, 1, 1, -1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, -1, 1, 1, 1, -1, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, -1, 1, 1, 1, 0, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, -1, 1, 1, 1, 0, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, -1, 1, 1, 1, 0, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, -1, 1, 1, 1, 1, -1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(1, -1, 1, 1, 1, 1, 0), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(1, 0, -1, -1, -1, -1, 0), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(1, 0, -1, -1, -1, -1, 1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(1, 0, -1, -1, -1, 0, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 0, -1, -1, -1, 0, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 0, -1, -1, -1, 0, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 0, -1, -1, -1, 1, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 0, -1, -1, -1, 1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 0, -1, -1, -1, 1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 0, -1, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, 0, -1, -1, 0, -1, 0), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, 0, -1, -1, 0, -1, 1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, 0, -1, -1, 0, 0, -1), None)
        self.assertEqual(test(1, 0, -1, -1, 0, 0, 1), None)
        self.assertEqual(test(1, 0, -1, -1, 0, 1, -1), None)
        self.assertEqual(test(1, 0, -1, -1, 0, 1, 0), None)
        self.assertEqual(test(1, 0, -1, -1, 0, 1, 1), None)
        self.assertEqual(test(1, 0, -1, -1, 1, -1, -1), None)
        self.assertEqual(test(1, 0, -1, -1, 1, -1, 0), None)
        self.assertEqual(test(1, 0, -1, -1, 1, -1, 1), None)
        self.assertEqual(test(1, 0, -1, -1, 1, 0, -1), None)
        self.assertEqual(test(1, 0, -1, -1, 1, 0, 0), None)
        self.assertEqual(test(1, 0, -1, -1, 1, 0, 1), None)
        self.assertEqual(test(1, 0, -1, -1, 1, 1, -1), None)
        self.assertEqual(test(1, 0, -1, -1, 1, 1, 0), None)
        self.assertEqual(test(1, 0, -1, 1, -1, -1, 0), None)
        self.assertEqual(test(1, 0, -1, 1, -1, -1, 1), None)
        self.assertEqual(test(1, 0, -1, 1, -1, 0, -1), None)
        self.assertEqual(test(1, 0, -1, 1, -1, 0, 0), None)
        self.assertEqual(test(1, 0, -1, 1, -1, 0, 1), None)
        self.assertEqual(test(1, 0, -1, 1, -1, 1, -1), None)
        self.assertEqual(test(1, 0, -1, 1, -1, 1, 0), None)
        self.assertEqual(test(1, 0, -1, 1, -1, 1, 1), None)
        self.assertEqual(test(1, 0, -1, 1, 0, -1, -1), None)
        self.assertEqual(test(1, 0, -1, 1, 0, -1, 0), None)
        self.assertEqual(test(1, 0, -1, 1, 0, -1, 1), None)
        self.assertEqual(test(1, 0, -1, 1, 0, 0, -1), None)
        self.assertEqual(test(1, 0, -1, 1, 0, 0, 1), None)
        self.assertEqual(test(1, 0, -1, 1, 0, 1, -1), None)
        self.assertEqual(test(1, 0, -1, 1, 0, 1, 0), None)
        self.assertEqual(test(1, 0, -1, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, -1, 1, 1, -1, -1), None)
        self.assertEqual(test(1, 0, -1, 1, 1, -1, 0), None)
        self.assertEqual(test(1, 0, -1, 1, 1, -1, 1), None)
        self.assertEqual(test(1, 0, -1, 1, 1, 0, -1), None)
        self.assertEqual(test(1, 0, -1, 1, 1, 0, 0), None)
        self.assertEqual(test(1, 0, -1, 1, 1, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, -1, 1, 1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, 0, -1, 1, 1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, 0, 0, -1, -1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 0, 0, -1, -1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 0, 0, -1, -1, 0, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 0, -1, -1, 0, 0), None)
        self.assertEqual(test(1, 0, 0, -1, -1, 0, 1), None)
        self.assertEqual(test(1, 0, 0, -1, -1, 1, -1), None)
        self.assertEqual(test(1, 0, 0, -1, -1, 1, 0), None)
        self.assertEqual(test(1, 0, 0, -1, -1, 1, 1), None)
        self.assertEqual(test(1, 0, 0, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 0, -1, 0, -1, 0), None)
        self.assertEqual(test(1, 0, 0, -1, 0, -1, 1), None)
        self.assertEqual(test(1, 0, 0, -1, 0, 0, -1), None)
        self.assertEqual(test(1, 0, 0, -1, 0, 0, 1), None)
        self.assertEqual(test(1, 0, 0, -1, 0, 1, -1), None)
        self.assertEqual(test(1, 0, 0, -1, 0, 1, 0), None)
        self.assertEqual(test(1, 0, 0, -1, 0, 1, 1), None)
        self.assertEqual(test(1, 0, 0, -1, 1, -1, -1), None)
        self.assertEqual(test(1, 0, 0, -1, 1, -1, 0), None)
        self.assertEqual(test(1, 0, 0, -1, 1, -1, 1), None)
        self.assertEqual(test(1, 0, 0, -1, 1, 0, -1), None)
        self.assertEqual(test(1, 0, 0, -1, 1, 0, 0), None)
        self.assertEqual(test(1, 0, 0, -1, 1, 0, 1), None)
        self.assertEqual(test(1, 0, 0, -1, 1, 1, -1), None)
        self.assertEqual(test(1, 0, 0, -1, 1, 1, 0), None)
        self.assertEqual(test(1, 0, 0, 1, -1, -1, 0), None)
        self.assertEqual(test(1, 0, 0, 1, -1, -1, 1), None)
        self.assertEqual(test(1, 0, 0, 1, -1, 0, -1), None)
        self.assertEqual(test(1, 0, 0, 1, -1, 0, 0), None)
        self.assertEqual(test(1, 0, 0, 1, -1, 0, 1), None)
        self.assertEqual(test(1, 0, 0, 1, -1, 1, -1), None)
        self.assertEqual(test(1, 0, 0, 1, -1, 1, 0), None)
        self.assertEqual(test(1, 0, 0, 1, -1, 1, 1), None)
        self.assertEqual(test(1, 0, 0, 1, 0, -1, -1), None)
        self.assertEqual(test(1, 0, 0, 1, 0, -1, 0), None)
        self.assertEqual(test(1, 0, 0, 1, 0, -1, 1), None)
        self.assertEqual(test(1, 0, 0, 1, 0, 0, -1), None)
        self.assertEqual(test(1, 0, 0, 1, 0, 0, 1), None)
        self.assertEqual(test(1, 0, 0, 1, 0, 1, -1), None)
        self.assertEqual(test(1, 0, 0, 1, 0, 1, 0), None)
        self.assertEqual(test(1, 0, 0, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 0, 1, 1, -1, -1), None)
        self.assertEqual(test(1, 0, 0, 1, 1, -1, 0), None)
        self.assertEqual(test(1, 0, 0, 1, 1, -1, 1), None)
        self.assertEqual(test(1, 0, 0, 1, 1, 0, -1), None)
        self.assertEqual(test(1, 0, 0, 1, 1, 0, 0), None)
        self.assertEqual(test(1, 0, 0, 1, 1, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 0, 1, 1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, 0, 0, 1, 1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, 0, 1, -1, -1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 0, 1, -1, -1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 0, 1, -1, -1, 0, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, -1, -1, 0, 0), None)
        self.assertEqual(test(1, 0, 1, -1, -1, 0, 1), None)
        self.assertEqual(test(1, 0, 1, -1, -1, 1, -1), None)
        self.assertEqual(test(1, 0, 1, -1, -1, 1, 0), None)
        self.assertEqual(test(1, 0, 1, -1, -1, 1, 1), None)
        self.assertEqual(test(1, 0, 1, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, -1, 0, -1, 0), None)
        self.assertEqual(test(1, 0, 1, -1, 0, -1, 1), None)
        self.assertEqual(test(1, 0, 1, -1, 0, 0, -1), None)
        self.assertEqual(test(1, 0, 1, -1, 0, 0, 1), None)
        self.assertEqual(test(1, 0, 1, -1, 0, 1, -1), None)
        self.assertEqual(test(1, 0, 1, -1, 0, 1, 0), None)
        self.assertEqual(test(1, 0, 1, -1, 0, 1, 1), None)
        self.assertEqual(test(1, 0, 1, -1, 1, -1, -1), None)
        self.assertEqual(test(1, 0, 1, -1, 1, -1, 0), None)
        self.assertEqual(test(1, 0, 1, -1, 1, -1, 1), None)
        self.assertEqual(test(1, 0, 1, -1, 1, 0, -1), None)
        self.assertEqual(test(1, 0, 1, -1, 1, 0, 0), None)
        self.assertEqual(test(1, 0, 1, -1, 1, 0, 1), None)
        self.assertEqual(test(1, 0, 1, -1, 1, 1, -1), None)
        self.assertEqual(test(1, 0, 1, -1, 1, 1, 0), None)
        self.assertEqual(test(1, 0, 1, 1, -1, -1, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, -1, -1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, -1, 0, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, -1, 0, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, -1, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, -1, 1, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, -1, 1, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, -1, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, 0, -1, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, 0, -1, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, 0, -1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, 0, 0, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, 0, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, 0, 1, -1), SpaceProperies.WHITE_DOUBLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, 0, 1, 0), SpaceProperies.WHITE_DOUBLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, 0, 1, 1), SpaceProperies.WHITE_DOUBLE_CHECK)
        self.assertEqual(test(1, 0, 1, 1, 1, -1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, 0, 1, 1, 1, -1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, 0, 1, 1, 1, -1, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, 0, 1, 1, 1, 0, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, 0, 1, 1, 1, 0, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, 0, 1, 1, 1, 0, 1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, 0, 1, 1, 1, 1, -1), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(1, 0, 1, 1, 1, 1, 0), SpaceProperies.WHITE_WIN)
        self.assertEqual(test(1, 1, -1, -1, -1, -1, 0), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(1, 1, -1, -1, -1, -1, 1), SpaceProperies.BLACK_WIN)
        self.assertEqual(test(1, 1, -1, -1, -1, 0, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 1, -1, -1, -1, 0, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 1, -1, -1, -1, 0, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 1, -1, -1, -1, 1, -1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 1, -1, -1, -1, 1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 1, -1, -1, -1, 1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 1, -1, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, 1, -1, -1, 0, -1, 0), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, 1, -1, -1, 0, -1, 1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, 1, -1, -1, 0, 0, -1), None)
        self.assertEqual(test(1, 1, -1, -1, 0, 0, 1), None)
        self.assertEqual(test(1, 1, -1, -1, 0, 1, -1), None)
        self.assertEqual(test(1, 1, -1, -1, 0, 1, 0), None)
        self.assertEqual(test(1, 1, -1, -1, 0, 1, 1), None)
        self.assertEqual(test(1, 1, -1, -1, 1, -1, -1), None)
        self.assertEqual(test(1, 1, -1, -1, 1, -1, 0), None)
        self.assertEqual(test(1, 1, -1, -1, 1, -1, 1), None)
        self.assertEqual(test(1, 1, -1, -1, 1, 0, -1), None)
        self.assertEqual(test(1, 1, -1, -1, 1, 0, 0), None)
        self.assertEqual(test(1, 1, -1, -1, 1, 0, 1), None)
        self.assertEqual(test(1, 1, -1, -1, 1, 1, -1), None)
        self.assertEqual(test(1, 1, -1, -1, 1, 1, 0), None)
        self.assertEqual(test(1, 1, -1, 1, -1, -1, 0), None)
        self.assertEqual(test(1, 1, -1, 1, -1, -1, 1), None)
        self.assertEqual(test(1, 1, -1, 1, -1, 0, -1), None)
        self.assertEqual(test(1, 1, -1, 1, -1, 0, 0), None)
        self.assertEqual(test(1, 1, -1, 1, -1, 0, 1), None)
        self.assertEqual(test(1, 1, -1, 1, -1, 1, -1), None)
        self.assertEqual(test(1, 1, -1, 1, -1, 1, 0), None)
        self.assertEqual(test(1, 1, -1, 1, -1, 1, 1), None)
        self.assertEqual(test(1, 1, -1, 1, 0, -1, -1), None)
        self.assertEqual(test(1, 1, -1, 1, 0, -1, 0), None)
        self.assertEqual(test(1, 1, -1, 1, 0, -1, 1), None)
        self.assertEqual(test(1, 1, -1, 1, 0, 0, -1), None)
        self.assertEqual(test(1, 1, -1, 1, 0, 0, 1), None)
        self.assertEqual(test(1, 1, -1, 1, 0, 1, -1), None)
        self.assertEqual(test(1, 1, -1, 1, 0, 1, 0), None)
        self.assertEqual(test(1, 1, -1, 1, 0, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, -1, 1, 1, -1, -1), None)
        self.assertEqual(test(1, 1, -1, 1, 1, -1, 0), None)
        self.assertEqual(test(1, 1, -1, 1, 1, -1, 1), None)
        self.assertEqual(test(1, 1, -1, 1, 1, 0, -1), None)
        self.assertEqual(test(1, 1, -1, 1, 1, 0, 0), None)
        self.assertEqual(test(1, 1, -1, 1, 1, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, -1, 1, 1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, 1, -1, 1, 1, 1, 0), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, 1, 0, -1, -1, -1, 0), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 1, 0, -1, -1, -1, 1), SpaceProperies.BLACK_LOSE)
        self.assertEqual(test(1, 1, 0, -1, -1, 0, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, -1, -1, 0, 0), None)
        self.assertEqual(test(1, 1, 0, -1, -1, 0, 1), None)
        self.assertEqual(test(1, 1, 0, -1, -1, 1, -1), None)
        self.assertEqual(test(1, 1, 0, -1, -1, 1, 0), None)
        self.assertEqual(test(1, 1, 0, -1, -1, 1, 1), None)
        self.assertEqual(test(1, 1, 0, -1, 0, -1, -1), SpaceProperies.BLACK_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, -1, 0, -1, 0), None)
        self.assertEqual(test(1, 1, 0, -1, 0, -1, 1), None)
        self.assertEqual(test(1, 1, 0, -1, 0, 0, -1), None)
        self.assertEqual(test(1, 1, 0, -1, 0, 0, 1), None)
        self.assertEqual(test(1, 1, 0, -1, 0, 1, -1), None)
        self.assertEqual(test(1, 1, 0, -1, 0, 1, 0), None)
        self.assertEqual(test(1, 1, 0, -1, 0, 1, 1), None)
        self.assertEqual(test(1, 1, 0, -1, 1, -1, -1), None)
        self.assertEqual(test(1, 1, 0, -1, 1, -1, 0), None)
        self.assertEqual(test(1, 1, 0, -1, 1, -1, 1), None)
        self.assertEqual(test(1, 1, 0, -1, 1, 0, -1), None)
        self.assertEqual(test(1, 1, 0, -1, 1, 0, 0), None)
        self.assertEqual(test(1, 1, 0, -1, 1, 0, 1), None)
        self.assertEqual(test(1, 1, 0, -1, 1, 1, -1), None)
        self.assertEqual(test(1, 1, 0, -1, 1, 1, 0), None)
        self.assertEqual(test(1, 1, 0, 1, -1, -1, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, -1, -1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, -1, 0, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, -1, 0, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, -1, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, -1, 1, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, -1, 1, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, -1, 1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 0, -1, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 0, -1, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 0, -1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 0, 0, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 0, 0, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 0, 1, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 0, 1, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 0, 1, 1), SpaceProperies.WHITE_DOUBLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 1, -1, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 1, -1, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 1, -1, 1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 1, 0, -1), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 1, 0, 0), SpaceProperies.WHITE_SINGLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 1, 0, 1), SpaceProperies.WHITE_DOUBLE_CHECK)
        self.assertEqual(test(1, 1, 0, 1, 1, 1, -1), SpaceProperies.WHITE_LOSE)
        self.assertEqual(test(1, 1, 0, 1, 1, 1, 0), SpaceProperies.WHITE_LOSE)

    def test_condition_vector(self):
        space_to_index = {space: i for i, space in enumerate(yavalath_engine.HexBoard().spaces)}
        board = yavalath_engine.HexBoard()
        for space in ['e5', 'e4', 'e6', 'd5', 'f5']:
            condition_vec = blue_player.NextMoveClassifier.get_condition_vector_for_space(space)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 0, 1)], 0], 3**0)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 0, 2)], 0], 3**1)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 0, 3)], 0], 3**2)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 1, 1)], 0], 3**3)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 1, 2)], 0], 3**4)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 1, 3)], 0], 3**5)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 2, 1)], 0], 3**6)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 2, 2)], 0], 3**7)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 2, 3)], 0], 3**8)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 3, 1)], 0], 3**9)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 3, 2)], 0], 3**10)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 3, 3)], 0], 3**11)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 4, 1)], 0], 3**12)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 4, 2)], 0], 3**13)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 4, 3)], 0], 3**14)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 5, 1)], 0], 3**15)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 5, 2)], 0], 3**16)
            self.assertEqual(condition_vec[space_to_index[board.next_space_in_dir(space, 5, 3)], 0], 3**17)

    def test_signature_and_propeties(self):
        signature, properties = blue_player.NextMoveClassifier.compute_signature_and_properties((
            (0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)))
        self.assertEqual(signature, 0)
        self.assertEqual(properties, (None, None))

        signature, properties = blue_player.NextMoveClassifier.compute_signature_and_properties((
            (1,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)))
        self.assertEqual(signature, 1)
        self.assertEqual(properties, (None, None))

        signature, properties = blue_player.NextMoveClassifier.compute_signature_and_properties((
            (0,1,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)))
        self.assertEqual(signature, 3)
        self.assertEqual(properties, (None, None))

        signature, properties = blue_player.NextMoveClassifier.compute_signature_and_properties((
            (1,1,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)))
        self.assertEqual(signature, 4)
        self.assertTupleEqual(properties, (blue_player.SpaceProperies.WHITE_LOSE, None))

        signature, properties = blue_player.NextMoveClassifier.compute_signature_and_properties((
            (-1,-1,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)))
        self.assertEqual(signature, -4)
        self.assertTupleEqual(properties, (None, blue_player.SpaceProperies.BLACK_LOSE))

        signature, properties = blue_player.NextMoveClassifier.compute_signature_and_properties((
            (1,1,0),(0,0,0),(1,1,0),(1,0,0),(0,0,0),(0,0,0)))
        self.assertTupleEqual(properties, (blue_player.SpaceProperies.WHITE_WIN, None))

        signature, properties = blue_player.NextMoveClassifier.compute_signature_and_properties((
            (1,1,0),(1,0,0),(1,1,0),(1,0,0),(1,0,0),(0,0,0)))
        self.assertTupleEqual(properties, (blue_player.SpaceProperies.WHITE_WIN, None))

        signature, properties = blue_player.NextMoveClassifier.compute_signature_and_properties((
            (1,1,0),(1,0,0),(-1,-1,0),(1,0,0),(0,1,0),(0,0,0)))
        self.assertTupleEqual(properties, (blue_player.SpaceProperies.WHITE_WIN, blue_player.SpaceProperies.BLACK_LOSE))

        # TODO: Lots more would be nice, but I think this is enough for now.

    def test_signature_lookup_table(self):
        test_signatures = numpy.array([129140163, 43046721, 14348907])  # Various powers of 3 should not have any properties
        move_properties = self.properties_table[self.signature_table[test_signatures]]
        pprint.pprint( sorted(test_signatures[numpy.nonzero(test_signatures)].flatten().tolist()) )
        pprint.pprint(self.signature_table[test_signatures])

    def test_adhoc_classifications(self):
        from players.blue_player import SpaceProperies
        game_so_far = ['g1', 'd5', 'e7', 'b5', 'e1', 'e3', 'i4', 'g4', 'b6', 'e4', 'f5', 'a5', 'c5', 'e8', 'c3', 'd3', 'f4', 'd2']

        # Classify with the signature-file as well as the old 'gamestate' classifier, so that I can compare the things
        # they both do.
        classifier = blue_player.NextMoveClassifier(game_so_far=game_so_far)
        classifier.compute_winning_and_losing_moves()
        gamestate = blue_player.GameState(game_so_far=game_so_far)

        # Compare WINS and LOSE for both.  Note that the old classifier doesn't eliminate wins, so I subtract them away
        self.assertSetEqual(set(gamestate.white_winning_moves), classifier.moves_by_property[blue_player.SpaceProperies.WHITE_WIN])
        self.assertSetEqual(set(gamestate.black_winning_moves), classifier.moves_by_property[blue_player.SpaceProperies.BLACK_WIN])
        self.assertSetEqual(set(gamestate.white_losing_moves)-set(gamestate.white_winning_moves), classifier.moves_by_property[blue_player.SpaceProperies.WHITE_LOSE])
        self.assertSetEqual(set(gamestate.black_losing_moves)-set(gamestate.black_winning_moves), classifier.moves_by_property[blue_player.SpaceProperies.BLACK_LOSE])

        # Now an ad-hoc check on some of the known problem spaces while I was debugging.
        signature, properties = classifier.compute_signature_and_properties_for_space('b3')
        self.assertTupleEqual((None,None), properties)
        signature, properties = classifier.compute_signature_and_properties_for_space('f7')
        self.assertTupleEqual((SpaceProperies.WHITE_DOUBLE_CHECK,None), properties)
        signature, properties = classifier.compute_signature_and_properties_for_space('f2')
        self.assertTupleEqual((SpaceProperies.WHITE_SINGLE_CHECK,SpaceProperies.BLACK_LOSE), properties)

    def test_signature_lookup_table_with_random_signatures(self):
        SIGNATURE_OFFSET = sum([3**i for i in range(18)])  # Add this to all signatures to make them >= 0.
        signature_index = 129140163 + SIGNATURE_OFFSET  # This is the
        arms = blue_player.NextMoveClassifier.signature_index_to_arms(signature_index)
        #arms = (0,1,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)
        new_signature, properties = blue_player.NextMoveClassifier.compute_signature_and_properties(arms) # Compute slowly
        self.assertEqual(new_signature, signature_index - SIGNATURE_OFFSET, "The signatures should be the same.")
        move_properties = self.properties_table[self.signature_table[signature_index]]
        self.assertEqual(properties, move_properties)
